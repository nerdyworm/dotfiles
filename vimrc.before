" Map jj to Esc
:imap jj <Esc>

" Allow OS X clipboard
set clipboard=unnamed

" Map leader to ,
let mapleader=","

" Horizontal split resizing
set winwidth=84
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=8
set winminheight=8
set winheight=999

" NerdTree
let NERDTreeMinimalUI = 1
let g:NERDTreeWinSize = 31

" Terminal colors
set t_Co=256

let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': ['eruby', 'html'] }

" store swap files here
set directory=$HOME/.vim/_tmp/

" Disable the window when neocomplete starts auto completing
"set completeopt-=preview


"autocmd! BufWritePost,BufEnter * Neomake

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 1
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

let g:neomake_elixir_enabled_makers = ['mycredo']
function NeomakeCredoErrorType(entry)
    if a:entry.type ==# 'F'      " Refactoring opportunities
        let type = 'W'
    elseif a:entry.type ==# 'D'  " Software design suggestions
        let type = 'I'
    elseif a:entry.type ==# 'W'  " Warnings
        let type = 'W'
    elseif a:entry.type ==# 'R'  " Readability suggestions
        let type = 'I'
    elseif a:entry.type ==# 'C'  " Convention violation
        let type = 'W'
    else
        let type = 'M'           " Everything else is a message
    endif
    let a:entry.type = type
endfunction
let g:neomake_elixir_mycredo_maker = {
      \ 'exe': 'mix',
      \ 'args': ['credo', 'list', '%:p', '--format=oneline'],
      \ 'errorformat': '[%t] %. %f:%l:%c %m,[%t] %. %f:%l %m',
      \ 'postprocess': function('NeomakeCredoErrorType')
      \ }




" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
   return neocomplete#close_popup() . "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()


" Go related mappings
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>r <Plug>(go-run)
au FileType go nmap <Leader>b <Plug>(go-build)
"au FileType go nmap <Leader>t <Plug>(go-test)
au FileType go nmap gd <Plug>(go-def-tab)

" Go language
let s:tlist_def_go_settings = 'go;g:enum;s:struct;u:union;t:type;' .
                           \ 'v:variable;f:function'

" Auto Import Go Packages
let g:go_fmt_command = "goimports"

let g:netrw_liststyle = 3
"nnoremap <Leader><Leader> :Tlist<CR><C-W>h<C-W>s:e .<CR><C-W>l:let g:netrw_chgwin=winnr()<CR><C-W>h
nnoremap <Leader><Leader> :Tagbar<CR><C-W>h<C-W>s:e .<CR><C-W>l:let g:netrw_chgwin=winnr()<CR><C-W>h

let g:ycm_semantic_triggers = {
     \ 'elm' : ['.'],
     \}

let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_show_diagnostics_ui = 1

" Janus Disable Plugins Section
call janus#disable_plugin('css-color')
call janus#disable_plugin('eunuch')
call janus#disable_plugin('matchit')
call janus#disable_plugin('narrowregion')
call janus#disable_plugin('vimwiki')
call janus#disable_plugin('zoomwin')
call janus#disable_plugin('vroom')
call janus#disable_plugin('snipmate')


" Disable All Janus Plugins
call janus#disable_plugin('getafe')
call janus#disable_plugin('github')
call janus#disable_plugin('irblack')
call janus#disable_plugin('janus-colors')
call janus#disable_plugin('molokai')
call janus#disable_plugin('pyte')
call janus#disable_plugin('sampler-pack')
call janus#disable_plugin('solarized')
call janus#disable_plugin('vividchalk')
call janus#disable_plugin('arduino')
call janus#disable_plugin('clojure')
call janus#disable_plugin('coffeescript')
"call janus#disable_plugin('csv')
call janus#disable_plugin('cucumber')
"call janus#disable_plugin('elixir')
call janus#disable_plugin('erlang')
call janus#disable_plugin('git')
call janus#disable_plugin('golang')
call janus#disable_plugin('haml')
"call janus#disable_plugin('handlebars')
call janus#disable_plugin('haskell')
"call janus#disable_plugin('javascript')
"call janus#disable_plugin('less')
"call janus#disable_plugin('markdown')
call janus#disable_plugin('minitest')
"call janus#disable_plugin('nodejs')
call janus#disable_plugin('puppet')
"call janus#disable_plugin('rails')
"call janus#disable_plugin('rspec')
"call janus#disable_plugin('ruby')
call janus#disable_plugin('scala')
"call janus#disable_plugin('scss')
call janus#disable_plugin('slim')
call janus#disable_plugin('textile')
"call janus#disable_plugin('ack')
call janus#disable_plugin('buffergator')
call janus#disable_plugin('css-color')
"call janus#disable_plugin('ctrlp')
call janus#disable_plugin('dispatch')
call janus#disable_plugin('easymotion')
"call janus#disable_plugin('endwise')
call janus#disable_plugin('eunuch')
"call janus#disable_plugin('fugitive')
call janus#disable_plugin('gist')
call janus#disable_plugin('gundo')
call janus#disable_plugin('indent-object')
call janus#disable_plugin('kwbd')
call janus#disable_plugin('matchit')
call janus#disable_plugin('multiple-cursors')
call janus#disable_plugin('narrowregion')
"call janus#disable_plugin('nerdcommenter')
"call janus#disable_plugin('nerdtree')
call janus#disable_plugin('repeat')
call janus#disable_plugin('snipmate')
call janus#disable_plugin('supertab')
call janus#disable_plugin('surround')
"call janus#disable_plugin('syntastic')
"call janus#disable_plugin('tagbar')
"call janus#disable_plugin('tlib')
call janus#disable_plugin('unimpaired')
"call janus#disable_plugin('vim-addon-mw-utils')
call janus#disable_plugin('vim-snippets')
call janus#disable_plugin('vimwiki')
call janus#disable_plugin('vroom')
call janus#disable_plugin('webapi')
"call janus#disable_plugin('zoomwin')


" NEW LIST OF STUFFS

