set shell=/bin/sh

set background=dark
color jellybeans


"hi link javaScriptTemplateDelim String
"hi link javaScriptTemplateVar Text
"hi link javaScriptTemplateString String

"let g:solarized_termcolors=256
"set background=light
"colorscheme solarized

" Prevents Solarized from highlighting tabs in go
hi SpecialKey ctermbg=NONE

" Always split the window below and to the right
set splitbelow
set splitright 
" System wide clipboard
set clipboard+=unnamed

" Start scrolling 3 lines before the border
set scrolloff=3

" Automatically reread files that have been changed externally
set autoread

" Use ctrl + movement keys to move around windows
map <C-H> <C-W>h
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l

" CtrlP Fuzzy File Finder
map ,f :CtrlP<cr>
map ,F :ClearCtrlPCache<cr>
let g:ctrlp_custom_ignore = {
    \ 'dir':  'dist\|node_modules\|tmp\|vendor\|\.git$|_build',
    \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
    \ }

" Ignore files in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" Find all the things
map ,k :Ack 

" Disable K
map K <Nop>

"JANUS:  OMG NO BINDING THINGS TO FIND THINGY! :(
nunmap <leader>fef
nunmap <leader>fc
nunmap <leader>tw

" Files Types
"autocmd BufRead,BufNewFile *.erb set filetype=eruby.html
autocmd BufRead,BufNewFile *.hbs set filetype=handlebars
autocmd BufRead,BufNewFile *.jbuilder set filetype=ruby
autocmd BufRead,BufNewFile Assetfile set filetype=ruby
autocmd BufRead,BufNewFile *.slim set filetype=slim
autocmd BufRead,BufNewFile *.cap set filetype=ruby

" Go Tabs
autocmd Filetype go setlocal ts=4 sw=4 sts=0 noexpandtab

" Golang stuff
" let g:syntastic_go_checkers = ['errcheck']

" Clojure Section
let vimclojure#WantNailgun = 1
let vimclojure#SplitPos = "bottom"
let vimclojure#SplitSize = 10
let g:vimclojure#ParenRainbow = 1
autocmd BufRead,BufNewFile *.clj nmap <C-c><C-c> <Plug>ClojureEvalFile
autocmd BufRead,BufNewFile *.clj nmap <C-x><C-x> <Plug>ClojureRunTests
au BufNewFile,BufRead *.cljs setf clojure


" Slimv
let g:slimv_swank_cmd = '! xterm -e lein swank &'
let g:paredit_mode = 0

" Ctags tags
set tags=tags;/

augroup AuNERDTreeCmd
autocmd AuNERDTreeCmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
"autocmd BufEnter * call s:FkingSize()

function s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" Don't underline links in html
highlight link htmlLink text

" Map ,t to script/test things
" map ,t :w\|!script/test %<cr>

" Map ,w to script/wip
map ,w :w\|!script/wip<cr>

" CTags and Fun Stuff
"map <Leader>RT :!ctags --extra=+f --exclude=.git --exclude=log -R * `bundle show rails`/../* <cr>
map <Leader>RT :!ctags --extra=+f --exclude=.git --exclude=log <cr>

" Add this type definition to your vimrc
" or do
" coffeetags --vim-conf >> <PATH TO YOUR VIMRC>
" if you want your tags to include vars/objects do:
" coffeetags --vim-conf --include-vars
"let g:tagbar_type_coffee = {
  "\ 'kinds' : [
  "\   'f:functions',
  "\   'o:object'
  "\ ],
  "\ 'kind2scope' : {
  "\  'f' : 'object',
  "\   'o' : 'object'
  "\},
  "\ 'sro' : ".",
  "\ 'ctagsbin' : '~/.rbenv/shims/coffeetags',
  "\ 'ctagsargs' : '--include-vars ',
  "\}

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

map <leader><CR> :nohlsearch<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>
"map <leader>c :w\|:!script/features<cr>
"map <leader>w :w\|:!script/features --profile wip<cr>

function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " Run the tests for the previously-marked file.
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_spec.coffee\|_test.go\|_test.exs\)$') != -1
  if in_test_file
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    return
  end
  call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
  let spec_line_number = line('.')
  call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
  " Set the spec file that tests will be run for.
  let t:grb_test_file=@%
endfunction

function! RunTests(filename)
  " Write the file and run tests for the given filename
  :w
  if match(a:filename, '\.feature$') != -1
    exec ":!script/features " . a:filename
  elseif match(a:filename, '\.coffee$') != -1
    exec ":!script/test_js " . a:filename
  elseif match(a:filename, '\.go$') != -1
    exec ":!script/test " . a:filename
  else
    if filereadable("script/test")
      exec ":!script/test " . a:filename
    elseif filereadable("bin/rspec")
      exec ":!bin/rspec --color " . a:filename
    elseif filereadable("Gemfile")
      exec ":!bundle exec rspec --color " . a:filename
    elseif filereadable("mix.exs")
      exec ":!mix test " . a:filename
    else
      exec ":!rspec --color " . a:filename
    end
  end
endfunction

"function! s:ExecuteInShell(command)
  "let command = join(map(split(a:command), 'expand(v:val)'))
  "let winnr = bufwinnr('^' . command . '$')
  "silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  "setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  "echo 'Execute ' . command . '...'
  "silent! execute 'silent %!'. command
  "silent! execute 'resize ' . line('$')
  "silent! redraw
  "silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  "silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  "echo 'Shell command ' . command . ' executed.'
"endfunction
"command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

" Switch buffers
map <C-N> :bnext<cr>
map <C-M> :bprev<cr>

" If you prefer the Omni-Completion tip window to close when a selection is
" made, these lines close it on movement in insert mode or when leaving
" insert mode
autocmd CursorMovedI * if pumvisible() == 0|silent! pclose|endif
autocmd InsertLeave * if pumvisible() == 0|silent! pclose|endif

let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$','\.class$', '\.o$', '\~$', '\.test$', '_build$', 'deps$', 'node_modules']


let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_fmt_fail_silently = 1

" Fix for vim-go
map ,rn :call go#rename#Rename()<cr>
let g:go_autodetect_gopath = 1

" Do not hide quotes in json
set conceallevel=0
let g:vim_json_syntax_conceal = 0

let g:syntastic_error_symbol = '‚ùå'
let g:syntastic_warning_symbol = 'üí©'

let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_javascript_eslint_exe='/usr/local/bin/eslint'
"let g:syntastic_debug = 3

let g:elm_format_autosave = 1

" Recomended from elm
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:elm_syntastic_show_warnings = 1


" Reason / Ocaml
let g:LanguageClient_serverCommands = {
    \ 'reason': ['ocaml-language-server', '--stdio'],
    \ 'ocaml': ['ocaml-language-server', '--stdio'],
    \ }

let g:mix_format_on_save = 1

